
SamD21J18A-MNT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000870  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000480  20000000  00000870  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  20000480  00000cf0  00010480  2**2
                  ALLOC
  3 .stack        00002000  200004b8  00000d28  00010480  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b28c  00000000  00000000  00010503  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac4  00000000  00000000  0001b78f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000f8  00000000  00000000  0001c253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  0001c34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00010bad  00000000  00000000  0001c3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000029c4  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00066f34  00000000  00000000  0002f96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002b0  00000000  00000000  000968a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000418  00000000  00000000  00096b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	200024b8 	.word	0x200024b8
   4:	000001bd 	.word	0x000001bd
   8:	000001b9 	.word	0x000001b9
   c:	000001b9 	.word	0x000001b9
	...
  2c:	000001b9 	.word	0x000001b9
	...
  38:	000001b9 	.word	0x000001b9
  3c:	000001b9 	.word	0x000001b9
  40:	000001b9 	.word	0x000001b9
  44:	000001b9 	.word	0x000001b9
  48:	000001b9 	.word	0x000001b9
  4c:	000001b9 	.word	0x000001b9
  50:	000001b9 	.word	0x000001b9
  54:	000001b9 	.word	0x000001b9
  58:	000001b9 	.word	0x000001b9
  5c:	000001b9 	.word	0x000001b9
  60:	000001b9 	.word	0x000001b9
  64:	000001b9 	.word	0x000001b9
  68:	000001b9 	.word	0x000001b9
  6c:	000001b9 	.word	0x000001b9
  70:	000001b9 	.word	0x000001b9
	...
  7c:	000001b9 	.word	0x000001b9
  80:	000001b9 	.word	0x000001b9
  84:	000001b9 	.word	0x000001b9
  88:	000001b9 	.word	0x000001b9
  8c:	000001b9 	.word	0x000001b9
  90:	000001b9 	.word	0x000001b9
	...
  9c:	000001b9 	.word	0x000001b9
  a0:	000001b9 	.word	0x000001b9
  a4:	000001b9 	.word	0x000001b9
  a8:	000001b9 	.word	0x000001b9
  ac:	000001b9 	.word	0x000001b9
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000480 	.word	0x20000480
  d4:	00000000 	.word	0x00000000
  d8:	00000870 	.word	0x00000870

000000dc <frame_dummy>:
  dc:	b508      	push	{r3, lr}
  de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd08      	pop	{r3, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	00000870 	.word	0x00000870
 108:	20000484 	.word	0x20000484
 10c:	00000870 	.word	0x00000870
 110:	00000000 	.word	0x00000000

00000114 <init_clocks>:
void init_clocks(void)
{
	/************************************************************************/
	/* 1) remove prescalers from OSC8M so we run at 8Mhz					*/
	/************************************************************************/
	SYSCTRL->OSC8M.bit.PRESC = 0;
 114:	4a20      	ldr	r2, [pc, #128]	; (198 <init_clocks+0x84>)
 116:	6a11      	ldr	r1, [r2, #32]
 118:	4b20      	ldr	r3, [pc, #128]	; (19c <init_clocks+0x88>)
 11a:	400b      	ands	r3, r1
 11c:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 11e:	4a20      	ldr	r2, [pc, #128]	; (1a0 <init_clocks+0x8c>)
 120:	6853      	ldr	r3, [r2, #4]
 122:	2180      	movs	r1, #128	; 0x80
 124:	02c9      	lsls	r1, r1, #11
 126:	430b      	orrs	r3, r1
 128:	6053      	str	r3, [r2, #4]
	
	/************************************************************************/
	/*2.1)Select Gen(0) set source as OSC8M no Div and enable clock         */
	/* Main clock															*/
	/************************************************************************/
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(GEN_CLOCK_DIV_ZERO);
 12a:	2200      	movs	r2, #0
 12c:	4b1d      	ldr	r3, [pc, #116]	; (1a4 <init_clocks+0x90>)
 12e:	609a      	str	r2, [r3, #8]
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 130:	1c1a      	adds	r2, r3, #0
 132:	7853      	ldrb	r3, [r2, #1]
 134:	b25b      	sxtb	r3, r3
 136:	2b00      	cmp	r3, #0
 138:	dbfb      	blt.n	132 <init_clocks+0x1e>
	
	/*write the Gen clock 0 configuration*/
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(GEN_CLOCK_GENERATOR_ZERO) |
 13a:	2283      	movs	r2, #131	; 0x83
 13c:	0252      	lsls	r2, r2, #9
 13e:	4b19      	ldr	r3, [pc, #100]	; (1a4 <init_clocks+0x90>)
 140:	605a      	str	r2, [r3, #4]
						GCLK_GENCTRL_SRC_OSC8M | 
						GCLK_GENCTRL_GENEN;
						
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 142:	1c1a      	adds	r2, r3, #0
 144:	7853      	ldrb	r3, [r2, #1]
 146:	b25b      	sxtb	r3, r3
 148:	2b00      	cmp	r3, #0
 14a:	dbfb      	blt.n	144 <init_clocks+0x30>
	
	/************************************************************************/
	/*2.2) Select Gen(1) set source as OSC8M no Div and enable clock        */
	/************************************************************************/
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(GEN_CLOCK_DIV_ZERO);
 14c:	2200      	movs	r2, #0
 14e:	4b15      	ldr	r3, [pc, #84]	; (1a4 <init_clocks+0x90>)
 150:	609a      	str	r2, [r3, #8]
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 152:	1c1a      	adds	r2, r3, #0
 154:	7853      	ldrb	r3, [r2, #1]
 156:	b25b      	sxtb	r3, r3
 158:	2b00      	cmp	r3, #0
 15a:	dbfb      	blt.n	154 <init_clocks+0x40>
	
	/*write the Gen clock 0 configuration*/
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(GEN_CLOCK_GENERATOR_ONE) |
 15c:	4a12      	ldr	r2, [pc, #72]	; (1a8 <init_clocks+0x94>)
 15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <init_clocks+0x90>)
 160:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_OSC8M |
	GCLK_GENCTRL_GENEN;
	
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 162:	1c1a      	adds	r2, r3, #0
 164:	7853      	ldrb	r3, [r2, #1]
 166:	b25b      	sxtb	r3, r3
 168:	2b00      	cmp	r3, #0
 16a:	dbfb      	blt.n	164 <init_clocks+0x50>
	
	
	/************************************************************************/
	/*3) I2C clocks SERCOM0 GEN0                                            */
	/************************************************************************/				
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 16c:	4a0d      	ldr	r2, [pc, #52]	; (1a4 <init_clocks+0x90>)
 16e:	8851      	ldrh	r1, [r2, #2]
 170:	4b0e      	ldr	r3, [pc, #56]	; (1ac <init_clocks+0x98>)
 172:	430b      	orrs	r3, r1
 174:	8053      	strh	r3, [r2, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);		
	
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 176:	7853      	ldrb	r3, [r2, #1]
 178:	b25b      	sxtb	r3, r3
 17a:	2b00      	cmp	r3, #0
 17c:	dbfb      	blt.n	176 <init_clocks+0x62>
	
	/************************************************************************/
	/*4) USART clocks SERCOM1 GEN(1)                                        */
	/************************************************************************/	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM1_GCLK_ID_CORE) | 
 17e:	4a0c      	ldr	r2, [pc, #48]	; (1b0 <init_clocks+0x9c>)
 180:	4b08      	ldr	r3, [pc, #32]	; (1a4 <init_clocks+0x90>)
 182:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN(1) | 
						GCLK_CLKCTRL_CLKEN;
						
	/*wait for sync*/
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
 184:	1c1a      	adds	r2, r3, #0
 186:	7853      	ldrb	r3, [r2, #1]
 188:	b25b      	sxtb	r3, r3
 18a:	2b00      	cmp	r3, #0
 18c:	dbfb      	blt.n	186 <init_clocks+0x72>
	
	/************************************************************************/
	/*5) APBx masks APBCMASK is setup for SERCOM0 and SERCOM1                                                           
	/************************************************************************/
	PM->APBCMASK.reg = PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1;
 18e:	220c      	movs	r2, #12
 190:	4b08      	ldr	r3, [pc, #32]	; (1b4 <init_clocks+0xa0>)
 192:	621a      	str	r2, [r3, #32]
				
							
 194:	4770      	bx	lr
 196:	46c0      	nop			; (mov r8, r8)
 198:	40000800 	.word	0x40000800
 19c:	fffffcff 	.word	0xfffffcff
 1a0:	41004000 	.word	0x41004000
 1a4:	40000c00 	.word	0x40000c00
 1a8:	00010601 	.word	0x00010601
 1ac:	00004014 	.word	0x00004014
 1b0:	00004115 	.word	0x00004115
 1b4:	40000400 	.word	0x40000400

000001b8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
 1b8:	e7fe      	b.n	1b8 <Dummy_Handler>
 1ba:	46c0      	nop			; (mov r8, r8)

000001bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 1bc:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 1be:	4b2e      	ldr	r3, [pc, #184]	; (278 <Reset_Handler+0xbc>)
 1c0:	4a2e      	ldr	r2, [pc, #184]	; (27c <Reset_Handler+0xc0>)
 1c2:	429a      	cmp	r2, r3
 1c4:	d003      	beq.n	1ce <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 1c6:	4b2e      	ldr	r3, [pc, #184]	; (280 <Reset_Handler+0xc4>)
 1c8:	4a2b      	ldr	r2, [pc, #172]	; (278 <Reset_Handler+0xbc>)
 1ca:	429a      	cmp	r2, r3
 1cc:	d304      	bcc.n	1d8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 1ce:	4b2d      	ldr	r3, [pc, #180]	; (284 <Reset_Handler+0xc8>)
 1d0:	4a2d      	ldr	r2, [pc, #180]	; (288 <Reset_Handler+0xcc>)
 1d2:	429a      	cmp	r2, r3
 1d4:	d310      	bcc.n	1f8 <Reset_Handler+0x3c>
 1d6:	e01e      	b.n	216 <Reset_Handler+0x5a>
 1d8:	4a2c      	ldr	r2, [pc, #176]	; (28c <Reset_Handler+0xd0>)
 1da:	4b29      	ldr	r3, [pc, #164]	; (280 <Reset_Handler+0xc4>)
 1dc:	3303      	adds	r3, #3
 1de:	1a9b      	subs	r3, r3, r2
 1e0:	089b      	lsrs	r3, r3, #2
 1e2:	3301      	adds	r3, #1
 1e4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 1e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 1e8:	4823      	ldr	r0, [pc, #140]	; (278 <Reset_Handler+0xbc>)
 1ea:	4924      	ldr	r1, [pc, #144]	; (27c <Reset_Handler+0xc0>)
 1ec:	588c      	ldr	r4, [r1, r2]
 1ee:	5084      	str	r4, [r0, r2]
 1f0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 1f2:	429a      	cmp	r2, r3
 1f4:	d1fa      	bne.n	1ec <Reset_Handler+0x30>
 1f6:	e7ea      	b.n	1ce <Reset_Handler+0x12>
 1f8:	4a25      	ldr	r2, [pc, #148]	; (290 <Reset_Handler+0xd4>)
 1fa:	4b22      	ldr	r3, [pc, #136]	; (284 <Reset_Handler+0xc8>)
 1fc:	3303      	adds	r3, #3
 1fe:	1a9b      	subs	r3, r3, r2
 200:	089b      	lsrs	r3, r3, #2
 202:	3301      	adds	r3, #1
 204:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 206:	2200      	movs	r2, #0
                *pDest++ = 0;
 208:	481f      	ldr	r0, [pc, #124]	; (288 <Reset_Handler+0xcc>)
 20a:	2100      	movs	r1, #0
 20c:	1814      	adds	r4, r2, r0
 20e:	6021      	str	r1, [r4, #0]
 210:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 212:	429a      	cmp	r2, r3
 214:	d1fa      	bne.n	20c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 216:	4a1f      	ldr	r2, [pc, #124]	; (294 <Reset_Handler+0xd8>)
 218:	21ff      	movs	r1, #255	; 0xff
 21a:	4b1f      	ldr	r3, [pc, #124]	; (298 <Reset_Handler+0xdc>)
 21c:	438b      	bics	r3, r1
 21e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 220:	39fd      	subs	r1, #253	; 0xfd
 222:	2390      	movs	r3, #144	; 0x90
 224:	005b      	lsls	r3, r3, #1
 226:	4a1d      	ldr	r2, [pc, #116]	; (29c <Reset_Handler+0xe0>)
 228:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 22a:	481d      	ldr	r0, [pc, #116]	; (2a0 <Reset_Handler+0xe4>)
 22c:	78c3      	ldrb	r3, [r0, #3]
 22e:	2403      	movs	r4, #3
 230:	43a3      	bics	r3, r4
 232:	2202      	movs	r2, #2
 234:	4313      	orrs	r3, r2
 236:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 238:	78c3      	ldrb	r3, [r0, #3]
 23a:	260c      	movs	r6, #12
 23c:	43b3      	bics	r3, r6
 23e:	2108      	movs	r1, #8
 240:	430b      	orrs	r3, r1
 242:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 244:	4b17      	ldr	r3, [pc, #92]	; (2a4 <Reset_Handler+0xe8>)
 246:	7b98      	ldrb	r0, [r3, #14]
 248:	2530      	movs	r5, #48	; 0x30
 24a:	43a8      	bics	r0, r5
 24c:	1c05      	adds	r5, r0, #0
 24e:	2020      	movs	r0, #32
 250:	4328      	orrs	r0, r5
 252:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 254:	7b98      	ldrb	r0, [r3, #14]
 256:	43b0      	bics	r0, r6
 258:	4301      	orrs	r1, r0
 25a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 25c:	7b99      	ldrb	r1, [r3, #14]
 25e:	43a1      	bics	r1, r4
 260:	430a      	orrs	r2, r1
 262:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 264:	4a10      	ldr	r2, [pc, #64]	; (2a8 <Reset_Handler+0xec>)
 266:	6851      	ldr	r1, [r2, #4]
 268:	2380      	movs	r3, #128	; 0x80
 26a:	430b      	orrs	r3, r1
 26c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 26e:	4b0f      	ldr	r3, [pc, #60]	; (2ac <Reset_Handler+0xf0>)
 270:	4798      	blx	r3

        /* Branch to main function */
        main();
 272:	4b0f      	ldr	r3, [pc, #60]	; (2b0 <Reset_Handler+0xf4>)
 274:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 276:	e7fe      	b.n	276 <Reset_Handler+0xba>
 278:	20000000 	.word	0x20000000
 27c:	00000870 	.word	0x00000870
 280:	20000480 	.word	0x20000480
 284:	200004b8 	.word	0x200004b8
 288:	20000480 	.word	0x20000480
 28c:	20000004 	.word	0x20000004
 290:	20000484 	.word	0x20000484
 294:	e000ed00 	.word	0xe000ed00
 298:	00000000 	.word	0x00000000
 29c:	41007000 	.word	0x41007000
 2a0:	41005000 	.word	0x41005000
 2a4:	41004800 	.word	0x41004800
 2a8:	41004000 	.word	0x41004000
 2ac:	000006c9 	.word	0x000006c9
 2b0:	00000335 	.word	0x00000335

000002b4 <pin_set_peripheral_function>:
 */

#include "includes.h"

void pin_set_peripheral_function(uint32_t pinmux)
{
 2b4:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
 2b6:	0c04      	lsrs	r4, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
 2b8:	b2e2      	uxtb	r2, r4
 2ba:	231f      	movs	r3, #31
 2bc:	4013      	ands	r3, r2
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
 2be:	0964      	lsrs	r4, r4, #5
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN =1;
 2c0:	b2e1      	uxtb	r1, r4
 2c2:	01c9      	lsls	r1, r1, #7
 2c4:	4c0d      	ldr	r4, [pc, #52]	; (2fc <pin_set_peripheral_function+0x48>)
 2c6:	46a4      	mov	ip, r4
 2c8:	4461      	add	r1, ip
 2ca:	18cc      	adds	r4, r1, r3
 2cc:	3440      	adds	r4, #64	; 0x40
 2ce:	7826      	ldrb	r6, [r4, #0]
 2d0:	2501      	movs	r5, #1
 2d2:	4335      	orrs	r5, r6
 2d4:	7025      	strb	r5, [r4, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
 2d6:	085b      	lsrs	r3, r3, #1
 2d8:	18cb      	adds	r3, r1, r3
 2da:	3330      	adds	r3, #48	; 0x30
 2dc:	781c      	ldrb	r4, [r3, #0]
 2de:	2101      	movs	r1, #1
 2e0:	400a      	ands	r2, r1
 2e2:	0091      	lsls	r1, r2, #2
 2e4:	220f      	movs	r2, #15
 2e6:	408a      	lsls	r2, r1
 2e8:	4394      	bics	r4, r2
 2ea:	701c      	strb	r4, [r3, #0]
                    //          
    // set new values
    PORT->Group[port].PMUX[pin/2].reg |=  ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
 2ec:	781a      	ldrb	r2, [r3, #0]
 2ee:	0400      	lsls	r0, r0, #16
 2f0:	0c00      	lsrs	r0, r0, #16
 2f2:	4088      	lsls	r0, r1
 2f4:	4302      	orrs	r2, r0
 2f6:	b2d2      	uxtb	r2, r2
 2f8:	701a      	strb	r2, [r3, #0]
 2fa:	bd70      	pop	{r4, r5, r6, pc}
 2fc:	41004400 	.word	0x41004400

00000300 <setup_ptrs>:
#ifdef VERSION
char aVER_Array[] = {"miniSam "BOARD_VER"\nBootloader "BL_VER"\nDev Board registered to "REG_TO"\nBoard ID "BOARD_ID"\n"};
#endif

void setup_ptrs()
{
 300:	b508      	push	{r3, lr}
	//set values, for flash pointers.
	dest_addr = APP_START;
 302:	2380      	movs	r3, #128	; 0x80
 304:	011b      	lsls	r3, r3, #4
 306:	4a06      	ldr	r2, [pc, #24]	; (320 <setup_ptrs+0x20>)
 308:	6013      	str	r3, [r2, #0]
	flash_ptr = APP_START;
 30a:	4a06      	ldr	r2, [pc, #24]	; (324 <setup_ptrs+0x24>)
 30c:	6013      	str	r3, [r2, #0]
	app_start_address = *flash_ptr;
 30e:	4a06      	ldr	r2, [pc, #24]	; (328 <setup_ptrs+0x28>)
 310:	6819      	ldr	r1, [r3, #0]
 312:	6011      	str	r1, [r2, #0]
	flash_byte_ptr = APP_START;
 314:	4a05      	ldr	r2, [pc, #20]	; (32c <setup_ptrs+0x2c>)
 316:	6013      	str	r3, [r2, #0]
	sendConfirm();
 318:	4b05      	ldr	r3, [pc, #20]	; (330 <setup_ptrs+0x30>)
 31a:	4798      	blx	r3
}
 31c:	bd08      	pop	{r3, pc}
 31e:	46c0      	nop			; (mov r8, r8)
 320:	200004a0 	.word	0x200004a0
 324:	200004ac 	.word	0x200004ac
 328:	200004b4 	.word	0x200004b4
 32c:	200004b0 	.word	0x200004b0
 330:	00000639 	.word	0x00000639

00000334 <main>:

int main(void)
{  
 334:	b5f0      	push	{r4, r5, r6, r7, lr}
 336:	465f      	mov	r7, fp
 338:	4656      	mov	r6, sl
 33a:	464d      	mov	r5, r9
 33c:	4644      	mov	r4, r8
 33e:	b4f0      	push	{r4, r5, r6, r7}
 340:	b083      	sub	sp, #12
 342:	af00      	add	r7, sp, #0
	
	PORT->Group[BOOT_PORT].OUTSET.reg = (1<<BOOT_PIN);  // set resistor to pull up
 344:	4b65      	ldr	r3, [pc, #404]	; (4dc <main+0x1a8>)
 346:	2280      	movs	r2, #128	; 0x80
 348:	0512      	lsls	r2, r2, #20
 34a:	619a      	str	r2, [r3, #24]
	PORT->Group[BOOT_PORT].PINCFG[BOOT_PIN].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
 34c:	2006      	movs	r0, #6
 34e:	215b      	movs	r1, #91	; 0x5b
 350:	5458      	strb	r0, [r3, r1]
	#if 1 /*enable for testing bootloader*/
		if ((PORT->Group[BOOT_PORT].IN.reg & (1u << BOOT_PIN)))
 352:	6a1b      	ldr	r3, [r3, #32]
 354:	4213      	tst	r3, r2
 356:	d00d      	beq.n	374 <main+0x40>
		{
			/*Get the entry point for our new app*/
			app_start_address = *(uint32_t *)(APP_START + 4);
 358:	4b61      	ldr	r3, [pc, #388]	; (4e0 <main+0x1ac>)
 35a:	681b      	ldr	r3, [r3, #0]
 35c:	4a61      	ldr	r2, [pc, #388]	; (4e4 <main+0x1b0>)
 35e:	6013      	str	r3, [r2, #0]
		
			/* Rebase the Stack Pointer */
			__set_MSP(*(uint32_t *) APP_START + 4);
 360:	2180      	movs	r1, #128	; 0x80
 362:	0109      	lsls	r1, r1, #4
 364:	680b      	ldr	r3, [r1, #0]
 366:	3304      	adds	r3, #4

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 368:	f383 8808 	msr	MSP, r3

			/* Rebase the vector table base address */
			SCB->VTOR = ((uint32_t) APP_START & SCB_VTOR_TBLOFF_Msk);
 36c:	4b5e      	ldr	r3, [pc, #376]	; (4e8 <main+0x1b4>)
 36e:	6099      	str	r1, [r3, #8]

			/* Jump to application Reset Handler in the application */
			asm("bx %0"::"r"(app_start_address));
 370:	6813      	ldr	r3, [r2, #0]
 372:	4718      	bx	r3
		}
	#endif /*end*/
	
	/* Flash page size is 64 bytes */
	uint16_t PAGE_SIZE = (8 << NVMCTRL->PARAM.bit.PSZ);	//used to read and write to flash.
 374:	4c5d      	ldr	r4, [pc, #372]	; (4ec <main+0x1b8>)
 376:	68a3      	ldr	r3, [r4, #8]
 378:	035b      	lsls	r3, r3, #13
 37a:	0f5b      	lsrs	r3, r3, #29
 37c:	2280      	movs	r2, #128	; 0x80
 37e:	0312      	lsls	r2, r2, #12
 380:	409a      	lsls	r2, r3
 382:	0c13      	lsrs	r3, r2, #16
 384:	607b      	str	r3, [r7, #4]
	uint8_t page_buffer[PAGE_SIZE];
 386:	4699      	mov	r9, r3
 388:	3307      	adds	r3, #7
 38a:	08db      	lsrs	r3, r3, #3
 38c:	00db      	lsls	r3, r3, #3
 38e:	466a      	mov	r2, sp
 390:	1ad3      	subs	r3, r2, r3
 392:	469d      	mov	sp, r3
 394:	603b      	str	r3, [r7, #0]
	
	/*get device information*/
	
	/*initilize Clocks*/
	init_clocks();
 396:	4b56      	ldr	r3, [pc, #344]	; (4f0 <main+0x1bc>)
 398:	4798      	blx	r3

	/* Config Usart */
	UART_sercom_init();
 39a:	4b56      	ldr	r3, [pc, #344]	; (4f4 <main+0x1c0>)
 39c:	4798      	blx	r3
	REG_PORT_DIR0 |= (1 << 14); //boot en led set as output.
	REG_PORT_OUT0 |= (1 << 14); //Turn boot en led on.
	#endif
	//Samd21 led pin
	#if 1
	REG_PORT_DIR0 |= (1 << 28);
 39e:	4b4f      	ldr	r3, [pc, #316]	; (4dc <main+0x1a8>)
 3a0:	681a      	ldr	r2, [r3, #0]
 3a2:	2180      	movs	r1, #128	; 0x80
 3a4:	0549      	lsls	r1, r1, #21
 3a6:	430a      	orrs	r2, r1
 3a8:	601a      	str	r2, [r3, #0]
	REG_PORT_OUT0 |= (1 << 28);
 3aa:	4a53      	ldr	r2, [pc, #332]	; (4f8 <main+0x1c4>)
 3ac:	6813      	ldr	r3, [r2, #0]
 3ae:	430b      	orrs	r3, r1
 3b0:	6013      	str	r3, [r2, #0]
	#endif
	/* Make CPU to run at 8MHz by clearing prescalar bits */ 
    SYSCTRL->OSC8M.bit.PRESC = 0;
 3b2:	4a52      	ldr	r2, [pc, #328]	; (4fc <main+0x1c8>)
 3b4:	6a11      	ldr	r1, [r2, #32]
 3b6:	4b52      	ldr	r3, [pc, #328]	; (500 <main+0x1cc>)
 3b8:	400b      	ands	r3, r1
 3ba:	6213      	str	r3, [r2, #32]
	NVMCTRL->CTRLB.bit.CACHEDIS = 1;
 3bc:	6863      	ldr	r3, [r4, #4]
 3be:	2280      	movs	r2, #128	; 0x80
 3c0:	02d2      	lsls	r2, r2, #11
 3c2:	4313      	orrs	r3, r2
 3c4:	6063      	str	r3, [r4, #4]
	
	//entering bootloader.
	send_string(aVER_Array);
 3c6:	484f      	ldr	r0, [pc, #316]	; (504 <main+0x1d0>)
 3c8:	4b4f      	ldr	r3, [pc, #316]	; (508 <main+0x1d4>)
 3ca:	4798      	blx	r3

    while (1) 
    {
        data_8 = uart_read_byte();
 3cc:	4b4f      	ldr	r3, [pc, #316]	; (50c <main+0x1d8>)
 3ce:	469b      	mov	fp, r3
 3d0:	4b4c      	ldr	r3, [pc, #304]	; (504 <main+0x1d0>)
 3d2:	469a      	mov	sl, r3
 3d4:	47d8      	blx	fp
 3d6:	2251      	movs	r2, #81	; 0x51
 3d8:	4651      	mov	r1, sl
 3da:	5488      	strb	r0, [r1, r2]

		if (data_8 == '#')
 3dc:	2823      	cmp	r0, #35	; 0x23
 3de:	d105      	bne.n	3ec <main+0xb8>
				else
				{
					uart_write_byte('!');
				}
			#else
				sendConfirm();
 3e0:	4b4b      	ldr	r3, [pc, #300]	; (510 <main+0x1dc>)
 3e2:	4798      	blx	r3
			#endif
			
			uart_write_byte((uint8_t)APP_SIZE);	
 3e4:	200e      	movs	r0, #14
 3e6:	4b4b      	ldr	r3, [pc, #300]	; (514 <main+0x1e0>)
 3e8:	4798      	blx	r3
 3ea:	e7f3      	b.n	3d4 <main+0xa0>
		}
		else if (data_8 == 'e')
 3ec:	2865      	cmp	r0, #101	; 0x65
 3ee:	d111      	bne.n	414 <main+0xe0>
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 3f0:	2080      	movs	r0, #128	; 0x80
 3f2:	0100      	lsls	r0, r0, #4
 3f4:	4b48      	ldr	r3, [pc, #288]	; (518 <main+0x1e4>)
 3f6:	6018      	str	r0, [r3, #0]
			{
				nvm_erase_row(i,PAGE_SIZE);
 3f8:	4e48      	ldr	r6, [pc, #288]	; (51c <main+0x1e8>)
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 3fa:	1c1c      	adds	r4, r3, #0
 3fc:	4d48      	ldr	r5, [pc, #288]	; (520 <main+0x1ec>)
			{
				nvm_erase_row(i,PAGE_SIZE);
 3fe:	6879      	ldr	r1, [r7, #4]
 400:	47b0      	blx	r6
		}
		else if (data_8 == 'e')
		{
			/*erase NVM from 0x800 (starting point) to top of NVM*/
			//erase from 0x800 to the top of nvm.
			for(i = APP_START; i < FLASH_SIZE; i = i + 256)
 402:	6823      	ldr	r3, [r4, #0]
 404:	1c58      	adds	r0, r3, #1
 406:	30ff      	adds	r0, #255	; 0xff
 408:	6020      	str	r0, [r4, #0]
 40a:	42a8      	cmp	r0, r5
 40c:	d9f7      	bls.n	3fe <main+0xca>
				else
				{
					uart_write_byte('`');
				}
			#else
				sendConfirm();
 40e:	4b40      	ldr	r3, [pc, #256]	; (510 <main+0x1dc>)
 410:	4798      	blx	r3
 412:	e7df      	b.n	3d4 <main+0xa0>
			#endif
			
		}
		else if (data_8 == 'p')
 414:	2870      	cmp	r0, #112	; 0x70
 416:	d122      	bne.n	45e <main+0x12a>
				if(!specialTalk)
				{
					sendConfirm();
				}
			#else
				sendConfirm();
 418:	4b3d      	ldr	r3, [pc, #244]	; (510 <main+0x1dc>)
 41a:	4798      	blx	r3
			#endif
			
			for (i = 0; i < PAGE_SIZE; i++)
 41c:	2200      	movs	r2, #0
 41e:	4b3e      	ldr	r3, [pc, #248]	; (518 <main+0x1e4>)
 420:	601a      	str	r2, [r3, #0]
 422:	464b      	mov	r3, r9
 424:	2b00      	cmp	r3, #0
 426:	d00a      	beq.n	43e <main+0x10a>
 428:	2400      	movs	r4, #0
			{
				page_buffer[i] = uart_read_byte();
 42a:	4e38      	ldr	r6, [pc, #224]	; (50c <main+0x1d8>)
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < PAGE_SIZE; i++)
 42c:	4d3a      	ldr	r5, [pc, #232]	; (518 <main+0x1e4>)
			{
				page_buffer[i] = uart_read_byte();
 42e:	47b0      	blx	r6
 430:	683b      	ldr	r3, [r7, #0]
 432:	5518      	strb	r0, [r3, r4]
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < PAGE_SIZE; i++)
 434:	682b      	ldr	r3, [r5, #0]
 436:	1c5c      	adds	r4, r3, #1
 438:	602c      	str	r4, [r5, #0]
 43a:	45a1      	cmp	r9, r4
 43c:	d8f7      	bhi.n	42e <main+0xfa>
			{
				page_buffer[i] = uart_read_byte();
			}
			nvm_write_buffer(dest_addr, page_buffer, PAGE_SIZE);
 43e:	4c39      	ldr	r4, [pc, #228]	; (524 <main+0x1f0>)
 440:	6820      	ldr	r0, [r4, #0]
 442:	6839      	ldr	r1, [r7, #0]
 444:	687a      	ldr	r2, [r7, #4]
 446:	4b38      	ldr	r3, [pc, #224]	; (528 <main+0x1f4>)
 448:	4798      	blx	r3
			dest_addr += PAGE_SIZE;
 44a:	6823      	ldr	r3, [r4, #0]
 44c:	444b      	add	r3, r9
 44e:	6023      	str	r3, [r4, #0]
				else
				{
					uart_write_byte('%');
				}
			#else
				sendConfirm();
 450:	4b2f      	ldr	r3, [pc, #188]	; (510 <main+0x1dc>)
 452:	4798      	blx	r3
			#endif
			
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
 454:	2280      	movs	r2, #128	; 0x80
 456:	01d2      	lsls	r2, r2, #7
 458:	4b34      	ldr	r3, [pc, #208]	; (52c <main+0x1f8>)
 45a:	601a      	str	r2, [r3, #0]
 45c:	e7ba      	b.n	3d4 <main+0xa0>

		}
		else if (data_8 == 'v')
 45e:	2876      	cmp	r0, #118	; 0x76
 460:	d119      	bne.n	496 <main+0x162>
				if(!specialTalk)
				{
					sendConfirm();
				}
			#else
				sendConfirm();
 462:	4b2b      	ldr	r3, [pc, #172]	; (510 <main+0x1dc>)
 464:	4798      	blx	r3
			#endif
			
			for (i = 0; i < (PAGE_SIZE); i++)
 466:	2200      	movs	r2, #0
 468:	4b2b      	ldr	r3, [pc, #172]	; (518 <main+0x1e4>)
 46a:	601a      	str	r2, [r3, #0]
 46c:	464b      	mov	r3, r9
 46e:	2b00      	cmp	r3, #0
 470:	d00c      	beq.n	48c <main+0x158>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
 472:	4d2f      	ldr	r5, [pc, #188]	; (530 <main+0x1fc>)
 474:	4e27      	ldr	r6, [pc, #156]	; (514 <main+0x1e0>)
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < (PAGE_SIZE); i++)
 476:	4c28      	ldr	r4, [pc, #160]	; (518 <main+0x1e4>)
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
 478:	682b      	ldr	r3, [r5, #0]
 47a:	1c5a      	adds	r2, r3, #1
 47c:	602a      	str	r2, [r5, #0]
 47e:	7818      	ldrb	r0, [r3, #0]
 480:	47b0      	blx	r6
				}
			#else
				sendConfirm();
			#endif
			
			for (i = 0; i < (PAGE_SIZE); i++)
 482:	6823      	ldr	r3, [r4, #0]
 484:	3301      	adds	r3, #1
 486:	6023      	str	r3, [r4, #0]
 488:	4599      	cmp	r9, r3
 48a:	d8f5      	bhi.n	478 <main+0x144>
			{	
				//++ after pointer post increments by 1
				uart_write_byte(* flash_byte_ptr++);
				
			}
			REG_PORT_OUTTGL0 = (1 << 14); //blinks light
 48c:	2280      	movs	r2, #128	; 0x80
 48e:	01d2      	lsls	r2, r2, #7
 490:	4b26      	ldr	r3, [pc, #152]	; (52c <main+0x1f8>)
 492:	601a      	str	r2, [r3, #0]
 494:	e79e      	b.n	3d4 <main+0xa0>
		}
		else if (data_8 == 'm')
 496:	286d      	cmp	r0, #109	; 0x6d
 498:	d102      	bne.n	4a0 <main+0x16c>
		{
			setup_ptrs();
 49a:	4b26      	ldr	r3, [pc, #152]	; (534 <main+0x200>)
 49c:	4798      	blx	r3
 49e:	e799      	b.n	3d4 <main+0xa0>
			
		}
		#ifdef VERSION
			else if (data_8 == 'i')
 4a0:	2869      	cmp	r0, #105	; 0x69
 4a2:	d103      	bne.n	4ac <main+0x178>
			{
				send_string(aVER_Array);
 4a4:	4817      	ldr	r0, [pc, #92]	; (504 <main+0x1d0>)
 4a6:	4b18      	ldr	r3, [pc, #96]	; (508 <main+0x1d4>)
 4a8:	4798      	blx	r3
 4aa:	e793      	b.n	3d4 <main+0xa0>
			{
				//special talk.
				specialTalk = 1;
			}
		#endif
		else if(data_8 == '^')
 4ac:	285e      	cmp	r0, #94	; 0x5e
 4ae:	d191      	bne.n	3d4 <main+0xa0>
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 4b0:	2300      	movs	r3, #0
 4b2:	4a19      	ldr	r2, [pc, #100]	; (518 <main+0x1e4>)
 4b4:	6013      	str	r3, [r2, #0]
 4b6:	2408      	movs	r4, #8
			{
				uart_write_byte(_DID >> next);
 4b8:	4b1f      	ldr	r3, [pc, #124]	; (538 <main+0x204>)
 4ba:	4698      	mov	r8, r3
 4bc:	4e15      	ldr	r6, [pc, #84]	; (514 <main+0x1e0>)
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 4be:	1c15      	adds	r5, r2, #0
			{
				uart_write_byte(_DID >> next);
 4c0:	4643      	mov	r3, r8
 4c2:	6998      	ldr	r0, [r3, #24]
 4c4:	40e0      	lsrs	r0, r4
 4c6:	b2c0      	uxtb	r0, r0
 4c8:	47b0      	blx	r6
				next+=8;
 4ca:	3408      	adds	r4, #8
 4cc:	b2e4      	uxtb	r4, r4
		#endif
		else if(data_8 == '^')
		{
			uint8_t next = 8;
			//Testing device ID over UART.
			for(i = 0;i < 4;i++)
 4ce:	682b      	ldr	r3, [r5, #0]
 4d0:	3301      	adds	r3, #1
 4d2:	602b      	str	r3, [r5, #0]
 4d4:	2b03      	cmp	r3, #3
 4d6:	d9f3      	bls.n	4c0 <main+0x18c>
 4d8:	e77c      	b.n	3d4 <main+0xa0>
 4da:	46c0      	nop			; (mov r8, r8)
 4dc:	41004400 	.word	0x41004400
 4e0:	00000804 	.word	0x00000804
 4e4:	200004b4 	.word	0x200004b4
 4e8:	e000ed00 	.word	0xe000ed00
 4ec:	41004000 	.word	0x41004000
 4f0:	00000115 	.word	0x00000115
 4f4:	00000689 	.word	0x00000689
 4f8:	41004410 	.word	0x41004410
 4fc:	40000800 	.word	0x40000800
 500:	fffffcff 	.word	0xfffffcff
 504:	20000000 	.word	0x20000000
 508:	00000649 	.word	0x00000649
 50c:	00000671 	.word	0x00000671
 510:	00000639 	.word	0x00000639
 514:	00000621 	.word	0x00000621
 518:	200004a4 	.word	0x200004a4
 51c:	0000053d 	.word	0x0000053d
 520:	0003ffff 	.word	0x0003ffff
 524:	200004a0 	.word	0x200004a0
 528:	0000057d 	.word	0x0000057d
 52c:	4100441c 	.word	0x4100441c
 530:	200004b0 	.word	0x200004b0
 534:	00000301 	.word	0x00000301
 538:	41002000 	.word	0x41002000

0000053c <nvm_erase_row>:
		return 0;
	}
#endif
	
	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 53c:	490c      	ldr	r1, [pc, #48]	; (570 <nvm_erase_row+0x34>)
 53e:	2201      	movs	r2, #1
 540:	7d0b      	ldrb	r3, [r1, #20]
 542:	421a      	tst	r2, r3
 544:	d0fc      	beq.n	540 <nvm_erase_row+0x4>
	
	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 546:	4a0a      	ldr	r2, [pc, #40]	; (570 <nvm_erase_row+0x34>)
 548:	8b11      	ldrh	r1, [r2, #24]
 54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <nvm_erase_row+0x38>)
 54c:	400b      	ands	r3, r1
 54e:	8313      	strh	r3, [r2, #24]
	
	while(!(NVMCTRL->INTFLAG.bit.READY));
 550:	1c11      	adds	r1, r2, #0
 552:	2201      	movs	r2, #1
 554:	7d0b      	ldrb	r3, [r1, #20]
 556:	421a      	tst	r2, r3
 558:	d0fc      	beq.n	554 <nvm_erase_row+0x18>
	
	/* Set address and command */	
	NVMCTRL->ADDR.reg = (row_address / 2);
 55a:	0840      	lsrs	r0, r0, #1
 55c:	4b04      	ldr	r3, [pc, #16]	; (570 <nvm_erase_row+0x34>)
 55e:	61d8      	str	r0, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
 560:	4a05      	ldr	r2, [pc, #20]	; (578 <nvm_erase_row+0x3c>)
 562:	801a      	strh	r2, [r3, #0]
	while(!(NVMCTRL->INTFLAG.bit.READY));
 564:	1c19      	adds	r1, r3, #0
 566:	2201      	movs	r2, #1
 568:	7d0b      	ldrb	r3, [r1, #20]
 56a:	421a      	tst	r2, r3
 56c:	d0fc      	beq.n	568 <nvm_erase_row+0x2c>
	
}
 56e:	4770      	bx	lr
 570:	41004000 	.word	0x41004000
 574:	fffffee0 	.word	0xfffffee0
 578:	ffffa502 	.word	0xffffa502

0000057c <nvm_write_buffer>:

void nvm_write_buffer(uint32_t destination_address, const uint8_t *buffer, uint16_t length)
{
 57c:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
	}
#endif

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 57e:	4d22      	ldr	r5, [pc, #136]	; (608 <nvm_write_buffer+0x8c>)
 580:	2401      	movs	r4, #1
 582:	7d2b      	ldrb	r3, [r5, #20]
 584:	421c      	tst	r4, r3
 586:	d0fc      	beq.n	582 <nvm_write_buffer+0x6>
	
	//set auto page writes
	NVMCTRL->CTRLB.bit.MANW = 0;
 588:	4b1f      	ldr	r3, [pc, #124]	; (608 <nvm_write_buffer+0x8c>)
 58a:	685c      	ldr	r4, [r3, #4]
 58c:	2580      	movs	r5, #128	; 0x80
 58e:	43ac      	bics	r4, r5
 590:	605c      	str	r4, [r3, #4]

	/* Erase the page buffer before buffering new data */
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
 592:	4c1e      	ldr	r4, [pc, #120]	; (60c <nvm_write_buffer+0x90>)
 594:	801c      	strh	r4, [r3, #0]

	/* Check if the module is busy */
	while(!NVMCTRL->INTFLAG.bit.READY);
 596:	1c1d      	adds	r5, r3, #0
 598:	2401      	movs	r4, #1
 59a:	7d2b      	ldrb	r3, [r5, #20]
 59c:	421c      	tst	r4, r3
 59e:	d0fc      	beq.n	59a <nvm_write_buffer+0x1e>

	/* Clear error flags */
	NVMCTRL->STATUS.reg &= ~NVMCTRL_STATUS_MASK;
 5a0:	4c19      	ldr	r4, [pc, #100]	; (608 <nvm_write_buffer+0x8c>)
 5a2:	8b25      	ldrh	r5, [r4, #24]
 5a4:	4b1a      	ldr	r3, [pc, #104]	; (610 <nvm_write_buffer+0x94>)
 5a6:	402b      	ands	r3, r5
 5a8:	8323      	strh	r3, [r4, #24]

	uint32_t nvm_address = destination_address / 2;
 5aa:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 5ac:	2a00      	cmp	r2, #0
 5ae:	d025      	beq.n	5fc <nvm_write_buffer+0x80>
 5b0:	0040      	lsls	r0, r0, #1
 5b2:	2300      	movs	r3, #0
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 5b4:	1e54      	subs	r4, r2, #1
 5b6:	46a4      	mov	ip, r4
			data |= (buffer[k + 1] << 8);
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 5b8:	4f13      	ldr	r7, [pc, #76]	; (608 <nvm_write_buffer+0x8c>)
 5ba:	4c16      	ldr	r4, [pc, #88]	; (614 <nvm_write_buffer+0x98>)
 5bc:	8826      	ldrh	r6, [r4, #0]
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 5be:	5ccd      	ldrb	r5, [r1, r3]
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
 5c0:	4563      	cmp	r3, ip
 5c2:	db01      	blt.n	5c8 <nvm_write_buffer+0x4c>
	for (uint16_t k = 0; k < length; k += 2) 
	{
		uint16_t data;
		
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[k];
 5c4:	b2ac      	uxth	r4, r5
 5c6:	e003      	b.n	5d0 <nvm_write_buffer+0x54>
		
		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (k < (length - 1)) {
			data |= (buffer[k + 1] << 8);
 5c8:	18cc      	adds	r4, r1, r3
 5ca:	7864      	ldrb	r4, [r4, #1]
 5cc:	0224      	lsls	r4, r4, #8
 5ce:	432c      	orrs	r4, r5
		}
		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
 5d0:	8004      	strh	r4, [r0, #0]
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 5d2:	803e      	strh	r6, [r7, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t k = 0; k < length; k += 2) 
 5d4:	3302      	adds	r3, #2
 5d6:	b29b      	uxth	r3, r3
 5d8:	3002      	adds	r0, #2
 5da:	429a      	cmp	r2, r3
 5dc:	d8ef      	bhi.n	5be <nvm_write_buffer+0x42>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 5de:	4b0e      	ldr	r3, [pc, #56]	; (618 <nvm_write_buffer+0x9c>)
 5e0:	781b      	ldrb	r3, [r3, #0]
 5e2:	2b00      	cmp	r3, #0
 5e4:	d104      	bne.n	5f0 <nvm_write_buffer+0x74>
 5e6:	2a3f      	cmp	r2, #63	; 0x3f
 5e8:	d802      	bhi.n	5f0 <nvm_write_buffer+0x74>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
 5ea:	4a0c      	ldr	r2, [pc, #48]	; (61c <nvm_write_buffer+0xa0>)
 5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <nvm_write_buffer+0x8c>)
 5ee:	801a      	strh	r2, [r3, #0]
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
 5f0:	4905      	ldr	r1, [pc, #20]	; (608 <nvm_write_buffer+0x8c>)
 5f2:	2201      	movs	r2, #1
 5f4:	7d0b      	ldrb	r3, [r1, #20]
 5f6:	421a      	tst	r2, r3
 5f8:	d0fc      	beq.n	5f4 <nvm_write_buffer+0x78>
 5fa:	e004      	b.n	606 <nvm_write_buffer+0x8a>
	}
	
	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((manual_page_write == 0) && (length < NVMCTRL_PAGE_SIZE)) {
 5fc:	4b06      	ldr	r3, [pc, #24]	; (618 <nvm_write_buffer+0x9c>)
 5fe:	781b      	ldrb	r3, [r3, #0]
 600:	2b00      	cmp	r3, #0
 602:	d1f5      	bne.n	5f0 <nvm_write_buffer+0x74>
 604:	e7f1      	b.n	5ea <nvm_write_buffer+0x6e>
		NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
	}
	
	while(!NVMCTRL->INTFLAG.bit.READY);
}
 606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 608:	41004000 	.word	0x41004000
 60c:	ffffa544 	.word	0xffffa544
 610:	fffffee0 	.word	0xfffffee0
 614:	00000840 	.word	0x00000840
 618:	2000049c 	.word	0x2000049c
 61c:	ffffa504 	.word	0xffffa504

00000620 <uart_write_byte>:
}

//write to the usart register.
void uart_write_byte(uint8_t data)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.DRE);
 620:	4904      	ldr	r1, [pc, #16]	; (634 <uart_write_byte+0x14>)
 622:	2201      	movs	r2, #1
 624:	7e0b      	ldrb	r3, [r1, #24]
 626:	421a      	tst	r2, r3
 628:	d0fc      	beq.n	624 <uart_write_byte+0x4>
		}
		
		BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
	}
	#endif
	BOOT_SERCOM->USART.DATA.reg = (uint16_t)data;
 62a:	b280      	uxth	r0, r0
 62c:	4b01      	ldr	r3, [pc, #4]	; (634 <uart_write_byte+0x14>)
 62e:	8518      	strh	r0, [r3, #40]	; 0x28
	
}
 630:	4770      	bx	lr
 632:	46c0      	nop			; (mov r8, r8)
 634:	42000800 	.word	0x42000800

00000638 <sendConfirm>:

#include "includes.h"

/*send confirmation of command received*/
void sendConfirm()
{
 638:	b508      	push	{r3, lr}
	uart_write_byte('s');
 63a:	2073      	movs	r0, #115	; 0x73
 63c:	4b01      	ldr	r3, [pc, #4]	; (644 <sendConfirm+0xc>)
 63e:	4798      	blx	r3
}
 640:	bd08      	pop	{r3, pc}
 642:	46c0      	nop			; (mov r8, r8)
 644:	00000621 	.word	0x00000621

00000648 <send_string>:

/*send a char array and format as a string*/
void send_string(volatile char s[])
{
 648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i;
	while(s[i] != 0x00)
 64a:	7803      	ldrb	r3, [r0, #0]
 64c:	2b00      	cmp	r3, #0
 64e:	d00c      	beq.n	66a <send_string+0x22>
 650:	1c05      	adds	r5, r0, #0
 652:	1c04      	adds	r4, r0, #0
	{
		uart_write_byte(s[i]);
 654:	4f05      	ldr	r7, [pc, #20]	; (66c <send_string+0x24>)
 656:	2301      	movs	r3, #1
 658:	1a1e      	subs	r6, r3, r0
 65a:	7820      	ldrb	r0, [r4, #0]
 65c:	b2c0      	uxtb	r0, r0
 65e:	47b8      	blx	r7
 660:	19a4      	adds	r4, r4, r6
 662:	192c      	adds	r4, r5, r4

/*send a char array and format as a string*/
void send_string(volatile char s[])
{
	uint32_t i;
	while(s[i] != 0x00)
 664:	7823      	ldrb	r3, [r4, #0]
 666:	2b00      	cmp	r3, #0
 668:	d1f7      	bne.n	65a <send_string+0x12>
	{
		uart_write_byte(s[i]);
		i++;
	}
}
 66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 66c:	00000621 	.word	0x00000621

00000670 <uart_read_byte>:
}

//read from the usart register.
uint8_t uart_read_byte(void)
{
	while(!BOOT_SERCOM->USART.INTFLAG.bit.RXC);
 670:	4904      	ldr	r1, [pc, #16]	; (684 <uart_read_byte+0x14>)
 672:	2201      	movs	r2, #1
 674:	7e0b      	ldrb	r3, [r1, #24]
 676:	089b      	lsrs	r3, r3, #2
 678:	421a      	tst	r2, r3
 67a:	d0fb      	beq.n	674 <uart_read_byte+0x4>
	return((uint8_t)(BOOT_SERCOM->USART.DATA.reg & 0x00FF));
 67c:	4b01      	ldr	r3, [pc, #4]	; (684 <uart_read_byte+0x14>)
 67e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 680:	b2c0      	uxtb	r0, r0
}
 682:	4770      	bx	lr
 684:	42000800 	.word	0x42000800

00000688 <UART_sercom_init>:

/*init USART module on SERCOM1*/
void UART_sercom_init()
{
 688:	b510      	push	{r4, lr}
	//Pmux eve = n/1, odd = (n-1)/2
	pin_set_peripheral_function(PINMUX_PA10C_SERCOM0_PAD2); //TXD
 68a:	4809      	ldr	r0, [pc, #36]	; (6b0 <UART_sercom_init+0x28>)
 68c:	4c09      	ldr	r4, [pc, #36]	; (6b4 <UART_sercom_init+0x2c>)
 68e:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PA11C_SERCOM0_PAD3); //RXD
 690:	4809      	ldr	r0, [pc, #36]	; (6b8 <UART_sercom_init+0x30>)
 692:	47a0      	blx	r4

	//Config SERCOM1 module for UART
	BOOT_SERCOM->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_RXPO(0x3) | SERCOM_USART_CTRLA_TXPO(0x1);
 694:	4b09      	ldr	r3, [pc, #36]	; (6bc <UART_sercom_init+0x34>)
 696:	4a0a      	ldr	r2, [pc, #40]	; (6c0 <UART_sercom_init+0x38>)
 698:	601a      	str	r2, [r3, #0]
	
	BOOT_SERCOM->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0);
 69a:	22c0      	movs	r2, #192	; 0xc0
 69c:	0292      	lsls	r2, r2, #10
 69e:	605a      	str	r2, [r3, #4]
	
	/*configure baud rate at 115200*/
	BOOT_SERCOM->USART.BAUD.reg = BAUD_VAL;
 6a0:	4a08      	ldr	r2, [pc, #32]	; (6c4 <UART_sercom_init+0x3c>)
 6a2:	819a      	strh	r2, [r3, #12]
	
	BOOT_SERCOM->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 6a4:	6819      	ldr	r1, [r3, #0]
 6a6:	2202      	movs	r2, #2
 6a8:	430a      	orrs	r2, r1
 6aa:	601a      	str	r2, [r3, #0]
	
}
 6ac:	bd10      	pop	{r4, pc}
 6ae:	46c0      	nop			; (mov r8, r8)
 6b0:	000a0002 	.word	0x000a0002
 6b4:	000002b5 	.word	0x000002b5
 6b8:	000b0002 	.word	0x000b0002
 6bc:	42000800 	.word	0x42000800
 6c0:	40310004 	.word	0x40310004
 6c4:	ffffc504 	.word	0xffffc504

000006c8 <__libc_init_array>:
 6c8:	b570      	push	{r4, r5, r6, lr}
 6ca:	4e0d      	ldr	r6, [pc, #52]	; (700 <__libc_init_array+0x38>)
 6cc:	4d0d      	ldr	r5, [pc, #52]	; (704 <__libc_init_array+0x3c>)
 6ce:	2400      	movs	r4, #0
 6d0:	1bad      	subs	r5, r5, r6
 6d2:	10ad      	asrs	r5, r5, #2
 6d4:	d005      	beq.n	6e2 <__libc_init_array+0x1a>
 6d6:	00a3      	lsls	r3, r4, #2
 6d8:	58f3      	ldr	r3, [r6, r3]
 6da:	3401      	adds	r4, #1
 6dc:	4798      	blx	r3
 6de:	42a5      	cmp	r5, r4
 6e0:	d1f9      	bne.n	6d6 <__libc_init_array+0xe>
 6e2:	f000 f8b3 	bl	84c <_init>
 6e6:	4e08      	ldr	r6, [pc, #32]	; (708 <__libc_init_array+0x40>)
 6e8:	4d08      	ldr	r5, [pc, #32]	; (70c <__libc_init_array+0x44>)
 6ea:	2400      	movs	r4, #0
 6ec:	1bad      	subs	r5, r5, r6
 6ee:	10ad      	asrs	r5, r5, #2
 6f0:	d005      	beq.n	6fe <__libc_init_array+0x36>
 6f2:	00a3      	lsls	r3, r4, #2
 6f4:	58f3      	ldr	r3, [r6, r3]
 6f6:	3401      	adds	r4, #1
 6f8:	4798      	blx	r3
 6fa:	42a5      	cmp	r5, r4
 6fc:	d1f9      	bne.n	6f2 <__libc_init_array+0x2a>
 6fe:	bd70      	pop	{r4, r5, r6, pc}
 700:	00000858 	.word	0x00000858
 704:	00000858 	.word	0x00000858
 708:	00000858 	.word	0x00000858
 70c:	00000860 	.word	0x00000860

00000710 <register_fini>:
 710:	b508      	push	{r3, lr}
 712:	4b03      	ldr	r3, [pc, #12]	; (720 <register_fini+0x10>)
 714:	2b00      	cmp	r3, #0
 716:	d002      	beq.n	71e <register_fini+0xe>
 718:	4802      	ldr	r0, [pc, #8]	; (724 <register_fini+0x14>)
 71a:	f000 f805 	bl	728 <atexit>
 71e:	bd08      	pop	{r3, pc}
 720:	00000000 	.word	0x00000000
 724:	00000739 	.word	0x00000739

00000728 <atexit>:
 728:	b508      	push	{r3, lr}
 72a:	1c01      	adds	r1, r0, #0
 72c:	2200      	movs	r2, #0
 72e:	2000      	movs	r0, #0
 730:	2300      	movs	r3, #0
 732:	f000 f81b 	bl	76c <__register_exitproc>
 736:	bd08      	pop	{r3, pc}

00000738 <__libc_fini_array>:
 738:	b538      	push	{r3, r4, r5, lr}
 73a:	4b09      	ldr	r3, [pc, #36]	; (760 <__libc_fini_array+0x28>)
 73c:	4c09      	ldr	r4, [pc, #36]	; (764 <__libc_fini_array+0x2c>)
 73e:	1ae4      	subs	r4, r4, r3
 740:	10a4      	asrs	r4, r4, #2
 742:	d009      	beq.n	758 <__libc_fini_array+0x20>
 744:	4a08      	ldr	r2, [pc, #32]	; (768 <__libc_fini_array+0x30>)
 746:	18a5      	adds	r5, r4, r2
 748:	00ad      	lsls	r5, r5, #2
 74a:	18ed      	adds	r5, r5, r3
 74c:	682b      	ldr	r3, [r5, #0]
 74e:	3c01      	subs	r4, #1
 750:	4798      	blx	r3
 752:	3d04      	subs	r5, #4
 754:	2c00      	cmp	r4, #0
 756:	d1f9      	bne.n	74c <__libc_fini_array+0x14>
 758:	f000 f882 	bl	860 <_fini>
 75c:	bd38      	pop	{r3, r4, r5, pc}
 75e:	46c0      	nop			; (mov r8, r8)
 760:	0000086c 	.word	0x0000086c
 764:	00000870 	.word	0x00000870
 768:	3fffffff 	.word	0x3fffffff

0000076c <__register_exitproc>:
 76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 76e:	4644      	mov	r4, r8
 770:	465f      	mov	r7, fp
 772:	4656      	mov	r6, sl
 774:	464d      	mov	r5, r9
 776:	469b      	mov	fp, r3
 778:	4b2f      	ldr	r3, [pc, #188]	; (838 <__register_exitproc+0xcc>)
 77a:	b4f0      	push	{r4, r5, r6, r7}
 77c:	681c      	ldr	r4, [r3, #0]
 77e:	23a4      	movs	r3, #164	; 0xa4
 780:	005b      	lsls	r3, r3, #1
 782:	1c05      	adds	r5, r0, #0
 784:	58e0      	ldr	r0, [r4, r3]
 786:	1c0e      	adds	r6, r1, #0
 788:	4690      	mov	r8, r2
 78a:	2800      	cmp	r0, #0
 78c:	d04b      	beq.n	826 <__register_exitproc+0xba>
 78e:	6843      	ldr	r3, [r0, #4]
 790:	2b1f      	cmp	r3, #31
 792:	dc0d      	bgt.n	7b0 <__register_exitproc+0x44>
 794:	1c5c      	adds	r4, r3, #1
 796:	2d00      	cmp	r5, #0
 798:	d121      	bne.n	7de <__register_exitproc+0x72>
 79a:	3302      	adds	r3, #2
 79c:	009b      	lsls	r3, r3, #2
 79e:	6044      	str	r4, [r0, #4]
 7a0:	501e      	str	r6, [r3, r0]
 7a2:	2000      	movs	r0, #0
 7a4:	bc3c      	pop	{r2, r3, r4, r5}
 7a6:	4690      	mov	r8, r2
 7a8:	4699      	mov	r9, r3
 7aa:	46a2      	mov	sl, r4
 7ac:	46ab      	mov	fp, r5
 7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 7b0:	4b22      	ldr	r3, [pc, #136]	; (83c <__register_exitproc+0xd0>)
 7b2:	2b00      	cmp	r3, #0
 7b4:	d03c      	beq.n	830 <__register_exitproc+0xc4>
 7b6:	20c8      	movs	r0, #200	; 0xc8
 7b8:	0040      	lsls	r0, r0, #1
 7ba:	e000      	b.n	7be <__register_exitproc+0x52>
 7bc:	bf00      	nop
 7be:	2800      	cmp	r0, #0
 7c0:	d036      	beq.n	830 <__register_exitproc+0xc4>
 7c2:	22a4      	movs	r2, #164	; 0xa4
 7c4:	2300      	movs	r3, #0
 7c6:	0052      	lsls	r2, r2, #1
 7c8:	58a1      	ldr	r1, [r4, r2]
 7ca:	6043      	str	r3, [r0, #4]
 7cc:	6001      	str	r1, [r0, #0]
 7ce:	50a0      	str	r0, [r4, r2]
 7d0:	3240      	adds	r2, #64	; 0x40
 7d2:	5083      	str	r3, [r0, r2]
 7d4:	3204      	adds	r2, #4
 7d6:	5083      	str	r3, [r0, r2]
 7d8:	2401      	movs	r4, #1
 7da:	2d00      	cmp	r5, #0
 7dc:	d0dd      	beq.n	79a <__register_exitproc+0x2e>
 7de:	009a      	lsls	r2, r3, #2
 7e0:	4691      	mov	r9, r2
 7e2:	4481      	add	r9, r0
 7e4:	4642      	mov	r2, r8
 7e6:	2188      	movs	r1, #136	; 0x88
 7e8:	464f      	mov	r7, r9
 7ea:	507a      	str	r2, [r7, r1]
 7ec:	22c4      	movs	r2, #196	; 0xc4
 7ee:	0052      	lsls	r2, r2, #1
 7f0:	4690      	mov	r8, r2
 7f2:	4480      	add	r8, r0
 7f4:	4642      	mov	r2, r8
 7f6:	3987      	subs	r1, #135	; 0x87
 7f8:	4099      	lsls	r1, r3
 7fa:	6812      	ldr	r2, [r2, #0]
 7fc:	468a      	mov	sl, r1
 7fe:	430a      	orrs	r2, r1
 800:	4694      	mov	ip, r2
 802:	4642      	mov	r2, r8
 804:	4661      	mov	r1, ip
 806:	6011      	str	r1, [r2, #0]
 808:	2284      	movs	r2, #132	; 0x84
 80a:	4649      	mov	r1, r9
 80c:	465f      	mov	r7, fp
 80e:	0052      	lsls	r2, r2, #1
 810:	508f      	str	r7, [r1, r2]
 812:	2d02      	cmp	r5, #2
 814:	d1c1      	bne.n	79a <__register_exitproc+0x2e>
 816:	1c02      	adds	r2, r0, #0
 818:	4655      	mov	r5, sl
 81a:	328d      	adds	r2, #141	; 0x8d
 81c:	32ff      	adds	r2, #255	; 0xff
 81e:	6811      	ldr	r1, [r2, #0]
 820:	430d      	orrs	r5, r1
 822:	6015      	str	r5, [r2, #0]
 824:	e7b9      	b.n	79a <__register_exitproc+0x2e>
 826:	1c20      	adds	r0, r4, #0
 828:	304d      	adds	r0, #77	; 0x4d
 82a:	30ff      	adds	r0, #255	; 0xff
 82c:	50e0      	str	r0, [r4, r3]
 82e:	e7ae      	b.n	78e <__register_exitproc+0x22>
 830:	2001      	movs	r0, #1
 832:	4240      	negs	r0, r0
 834:	e7b6      	b.n	7a4 <__register_exitproc+0x38>
 836:	46c0      	nop			; (mov r8, r8)
 838:	00000848 	.word	0x00000848
 83c:	00000000 	.word	0x00000000
 840:	0000a504 	.word	0x0000a504
 844:	00000043 	.word	0x00000043

00000848 <_global_impure_ptr>:
 848:	20000058                                X.. 

0000084c <_init>:
 84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 84e:	46c0      	nop			; (mov r8, r8)
 850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 852:	bc08      	pop	{r3}
 854:	469e      	mov	lr, r3
 856:	4770      	bx	lr

00000858 <__init_array_start>:
 858:	00000711 	.word	0x00000711

0000085c <__frame_dummy_init_array_entry>:
 85c:	000000dd                                ....

00000860 <_fini>:
 860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 862:	46c0      	nop			; (mov r8, r8)
 864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 866:	bc08      	pop	{r3}
 868:	469e      	mov	lr, r3
 86a:	4770      	bx	lr

0000086c <__fini_array_start>:
 86c:	000000b5 	.word	0x000000b5
